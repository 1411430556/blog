import{_ as t,E as a,c as o,o as n,j as e,I as i,am as s,a as c}from"./chunks/framework.pKienSF_.js";const w=JSON.parse(`{"title":"扩展阅读","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"fe/typescript/expand.md","filePath":"fe/typescript/expand.md","lastUpdated":1751611206000}`),l={name:"fe/typescript/expand.md"},p=e("h1",{id:"扩展阅读",tabindex:"-1"},[c("扩展阅读 "),e("a",{class:"header-anchor",href:"#扩展阅读","aria-label":'Permalink to "扩展阅读"'},"​")],-1),h=s('<p>此处记录了<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noreferrer">官方手册</a>（<a href="https://www.patrickzhong.com/TypeScript/" target="_blank" rel="noreferrer">中文版</a>）中包含，但是本博客未涉及的概念。</p><p>我认为它们是一些不重要或者不属于 <code>TypeScript</code> 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。</p><ul><li><a href="https://ts.xcatliu.com/advanced/decorator.html" target="_blank" rel="noreferrer">装饰器 Decorators</a>：<code>typescript</code>中装饰器的用法</li><li><a href="http://www.typescriptlang.org/docs/handbook/variable-declarations.html" target="_blank" rel="noreferrer">Variable Declarations</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html" target="_blank" rel="noreferrer">中文版</a>）：使用 <code>let</code> 和 <code>const</code> 替代 <code>var</code>，这是 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noreferrer">ES6 的知识</a></li><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this" target="_blank" rel="noreferrer"><code>this</code></a>：箭头函数的运用，这是 <a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noreferrer">ES6 的知识</a></li><li><a href="http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics" target="_blank" rel="noreferrer">Using Class Types in Generics</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">中文版</a>）：创建工厂函数时，需要引用构造函数的类类型</li><li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type" target="_blank" rel="noreferrer">Best common type</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E6%9C%80%E4%BD%B3%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">中文版</a>）：数组的类型推论</li><li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type" target="_blank" rel="noreferrer">Contextual Type</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">中文版</a>）：函数输入的类型推论</li><li><a href="http://www.typescriptlang.org/docs/handbook/type-compatibility.html" target="_blank" rel="noreferrer">Type Compatibility</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html" target="_blank" rel="noreferrer">中文版</a>）：允许不严格符合类型，只需要在一定规则下兼容即可</li><li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types" target="_blank" rel="noreferrer">Advanced Types 交叉类型</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/advanced-types.html?search=Advanced" target="_blank" rel="noreferrer">中文版</a>）：使用 <code>&amp;</code> 将多种类型的共有部分叠加成一种类型</li><li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types" target="_blank" rel="noreferrer">Type Guards and Differentiating Types</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/advanced-types.html?highlight=Differentiating#%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%86type-guards-and-differentiating-types" target="_blank" rel="noreferrer">中文版</a>）：联合类型在一些情况下被识别为特定的类型</li><li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions" target="_blank" rel="noreferrer">Discriminated Unions</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/advanced-types.html?highlight=Discriminated#%E5%8F%AF%E8%BE%A8%E8%AF%86%E8%81%94%E5%90%88discriminated-unions" target="_blank" rel="noreferrer">中文版</a>）：使用 <code>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li><li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types" target="_blank" rel="noreferrer">Polymorphic <code>this</code> types</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%A4%9A%E6%80%81%E7%9A%84this%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">中文版</a>）：父类的某个方法返回 <code>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li><li><a href="http://www.typescriptlang.org/docs/handbook/symbols.html" target="_blank" rel="noreferrer">Symbols</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/symbols.html#%E4%BC%97%E6%89%80%E5%91%A8%E7%9F%A5%E7%9A%84symbols" target="_blank" rel="noreferrer">中文版</a>）：新原生类型，这是 <a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noreferrer">ES6 的知识</a></li><li><a href="http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html" target="_blank" rel="noreferrer">Iterators and Generators</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/iterators-and-generators.html" target="_blank" rel="noreferrer">中文版</a>）：迭代器，这是 <a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noreferrer">ES6 的知识</a></li><li><a href="http://www.typescriptlang.org/docs/handbook/namespaces.html" target="_blank" rel="noreferrer">Namespaces 命名空间</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/namespaces.html" target="_blank" rel="noreferrer">中文版</a>）：避免全局污染，现在已被 <a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noreferrer">ES6 Module</a> 替代</li><li><a href="http://www.typescriptlang.org/docs/handbook/mixins.html" target="_blank" rel="noreferrer">Mixins 混入</a>（<a href="https://www.patrickzhong.com/TypeScript/zh/reference/mixins.html?highlight=mixins#%E7%90%86%E8%A7%A3%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">中文版</a>）：一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href="http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">ES6 中 Mixin 模式的实现</a></li></ul>',3);function d(f,g,k,b,y,m){const r=a("ArticleMetadata");return n(),o("div",null,[p,i(r),h])}const _=t(l,[["render",d]]);export{w as __pageData,_ as default};
