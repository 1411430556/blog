import{_ as s,c as a,o as i,am as n}from"./chunks/framework.pKienSF_.js";const e="/assets/pnpm-patch-result.DO9saaef.png",u=JSON.parse(`{"title":"修改 node_modules 中的依赖（打补丁）","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"notes/packageManagers/patch.md","filePath":"notes/packageManagers/patch.md","lastUpdated":1750122986000}`),p={name:"notes/packageManagers/patch.md"},l=n(`<h1 id="修改-node-modules-中的依赖-打补丁" tabindex="-1">修改 node_modules 中的依赖（打补丁） <a class="header-anchor" href="#修改-node-modules-中的依赖-打补丁" aria-label="Permalink to &quot;修改 node_modules 中的依赖（打补丁）&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>当开发时，有时会遇到这样一种情况：依赖的库有 <code>bug</code> 或者不满足要求，这时就需要对 <code>node_modules</code> 中的依赖进行修改。</p><h2 id="常见做法" tabindex="-1">常见做法 <a class="header-anchor" href="#常见做法" aria-label="Permalink to &quot;常见做法&quot;">​</a></h2><p>对依赖进行更改通常又下面几种做法：</p><ol><li><p>提 <code>issue</code> 等待作者修复。或者 <code>fork</code> 源码，修复 <code>bug</code> 然后提交 <code>pr</code>，等待作者合并</p><ul><li>等待周期长，有的库甚至作者已经放弃维护</li></ul></li><li><p><code>fork</code> 该库的代码到自己仓库，修改后，从自己仓库安装这个插件</p><ul><li>增加维护成本，需要和原仓库保持同步，否则会丢失更新</li><li>后期可能会和原仓库出现难以合并的分歧</li><li>需要注意合法性问题，可能需要原作者授权</li></ul></li><li><p>直接修改 <code>node_modules</code> 中的依赖</p><ul><li>适合应急，周期短</li><li>修改只在本地生效</li></ul></li><li><p>对 <code>node_modules</code> 中的依赖打补丁</p><ul><li>适合应急，周期短</li><li>提交补丁文件后修改可在本地和远程生效</li></ul></li></ol><p>综合来看这几种方法，首先我们的开发时间紧张，不可能去一直等待作者的修复或者合并，<code>fork</code> 该库代码到自己仓库又会增加我们的维护成本，直接修改 <code>node_modules</code>包只在本地生效，对多人协作有影响。所以对 <code>node_modules</code> 中的依赖打补丁应该是最适合的解决方式。</p><h2 id="打补丁是什么" tabindex="-1">打补丁是什么 <a class="header-anchor" href="#打补丁是什么" aria-label="Permalink to &quot;打补丁是什么&quot;">​</a></h2><p>打补丁是一种在不修改原始文件的情况下对文件进行增量修改的技术，它可以用来修复 <code>bug</code>、添加功能、或者依赖内部的某些逻辑。</p><p>打补丁的原理是使用 <code>diff</code> 工具来比较两个文件（或目录）之间的差异，并生成一个补丁文件<code>（patch file）</code>，这个补丁文件记录了如何从一个文件（或目录）变成另一个文件（或目录）所需要做的修改，然后使用 <code>patch</code> 工具来将补丁文件应用到原始文件（或目录）上，从而实现修改。</p><p>打补丁有以下优点：</p><ul><li>补丁文件通常很小，可以节省磁盘空间和网络带宽</li><li>补丁文件可以被提交到版本控制系统中，方便追踪和管理</li><li>补丁文件可以在不同的平台和环境中使用，提高兼容性和可移植性</li><li>补丁文件可以在安装或更新依赖包后自动应用，减少手动操作</li></ul><h2 id="如何打补丁" tabindex="-1">如何打补丁 <a class="header-anchor" href="#如何打补丁" aria-label="Permalink to &quot;如何打补丁&quot;">​</a></h2><p>不同的包管理器，打补丁的方法也不同，但其原理都是一样的</p><ul><li>在项目目录下生成一个 <code>patches</code> 文件夹，里面存放着所有的补丁文件（其补丁内容为 <code>diff</code> 格式）</li><li>在 <code>npm install</code> 后自动应用补丁</li></ul><h3 id="使用-pnpm或-yarn-v2" tabindex="-1">使用 <code>pnpm</code>或 <code>yarn v2+</code> <a class="header-anchor" href="#使用-pnpm或-yarn-v2" aria-label="Permalink to &quot;使用 \`pnpm\`或 \`yarn v2+\`&quot;">​</a></h3><p><code>pnpm</code> 和 <code>yarn v2+</code> 都提供了 <code>patch</code> 命令，可以直接使用</p><p><strong>以 <code>pnpm</code> 为例</strong></p><p>假设我们接下来要对 <code>vitePress</code> 这个包进行打补丁操作，先执行 <code>pnpm patch</code> 命令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 🌰</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitepress@1.6.3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行结果</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> folder:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DMINI~1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ppData</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ocal</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a81218255b3018ed09bed2c60e32659</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Once</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you&#39;re done with your changes, run &quot;pnpm patch-commit C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\6a81218255b3018ed09bed2c60e32659&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>该命令会将指定的软件包提取到一个可以随意编辑的临时目录中供我们修改，我们打开给定的文件夹<code>C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\6a81218255b3018ed09bed2c60e32659</code>进行更改</p><p>更改完之后运行 <code>pnpm patch-commit</code> 命令，并且传入临时目录的路径</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;path&gt; 是之前提取的临时目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：如果使用 windows 系统并且使用 git bash 的话，请将路径中的 \\ 替换为 \\\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ADMINI~1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AppData</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Local</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Temp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">6a81218255b3018ed09bed2c60e32659</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>该命令会生成相应的补丁文件到项目中（默认保存在项目根目录下的 <code>patches</code> 目录中）</p><p><img src="`+e+`" alt="pnpm-patch" loading="lazy"></p><p>并且 <code>package.json</code> 也会有相应内容</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;patchedDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;vitepress@1.6.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patches/vitepress@1.6.3.patch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样后续只要我们运行 <code>pnpm install</code> 等安装命令时，补丁文件就会自动应用到项目中</p><h3 id="使用-npm-或-yarn-v1-时" tabindex="-1">使用 <code>npm</code> 或 <code>yarn v1</code> 时 <a class="header-anchor" href="#使用-npm-或-yarn-v1-时" aria-label="Permalink to &quot;使用 \`npm\` 或 \`yarn v1\` 时&quot;">​</a></h3><p>使用 <code>npm</code> 或 <code>yarn v1</code> 管理依赖时，需要借助第三方工具 <code>patch-package</code> 来实现对 <code>node_modules</code> 中的依赖打补丁</p><p><strong>以 <code>npm</code> 为例</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 安装 patch-package</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 添加 postinstall 脚本，以便在每次 npm install 后自动应用补丁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts.postinstall=&quot;patch-package&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 修改 node_modules 指定依赖包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. 生成补丁 &lt;pkg name&gt; 是上一步修改的依赖包名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,32),t=[l];function h(k,d,r,c,o,F){return i(),a("div",null,t)}const m=s(p,[["render",h]]);export{u as __pageData,m as default};
